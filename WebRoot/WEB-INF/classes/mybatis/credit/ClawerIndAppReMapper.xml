<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ClawerIndAppReMapper">
    
   <!-- 个人查询申请审核列表 -->
<select id="IndAppRelistPage" parameterType="page" resultType="pd" >
		SELECT
            A.ID,
            A.APPLICATION_TIME,
            A.USER_SYS_ID,
            A.INTERNAL,
            A.CLIENT_TYPE,
            DECRYPT_DEC(B.CLIENT_NAME) CLIENT_NAME,
            B.CREDENTIALS_TYPE,
            DECRYPT_DEC(B.CREDENTIALS_NO) CREDENTIALS_NO,
            B.QUERY_REASON,
            B.QUERY_VERSION,
            C.NAME AS ORG_NAME
        FROM
            CIFM_FLOW_STATUS A,CIFM_PERSON_INFO B,SYS_ORG C,SYS_USER_ORG D 
        WHERE
            A.ID = B.ID AND A.STATUS='01' AND A.CLIENT_TYPE = '1' AND D.USER_ID = A.USER_SYS_ID AND C.ORG_ID=D.ORG_ID AND A.CHECK_SYS_ID=#{pd.USER_ID}
			<if test="pd.CLIENT_NAME!=null and pd.CLIENT_NAME!=''">
			    AND 
			    	DECRYPT_DEC(B.CLIENT_NAME) = #{pd.CLIENT_NAME}
			</if>
			<if test="pd.CREDENTIALS_TYPE!=null and pd.CREDENTIALS_TYPE!=''">
			    AND 
			    	B.CREDENTIALS_TYPE = #{pd.CREDENTIALS_TYPE}
			</if>
			<if test="pd.CREDENTIALS_NO!=null and pd.CREDENTIALS_NO!=''">
			    AND 
			    	DECRYPT_DEC(B.CREDENTIALS_NO) = #{pd.CREDENTIALS_NO}
			</if>
		ORDER BY A.ID
	</select>
	  <!-- 查询系统用户部门 -->
	<select id="getUserDepart" parameterType="pd" resultType="String" >
		SELECT
			DEPT_CODE
		FROM
			SYS_USER
		WHERE
			USER_ID = #{USER_SYS_ID}
	</select>
	  <!-- 查询系统用户机构 -->
	<select id="getUserOrg" parameterType="pd" resultType="String" >
		SELECT 
			A.NAME 
		FROM 
			SYS_ORG A,SYS_USER_ORG B 
		WHERE 
			A.ORG_ID = B.ORG_ID AND B.USER_ID = #{USER_SYS_ID}
	</select>
	   <!-- 查询个人申请信息 -->
	<select id="getAppCheck" parameterType="pd" resultType="pd" >
		SELECT
			A.APPLICATION_TIME,
			A.INTERNAL,
			DECRYPT_DEC(B.CLIENT_NAME) CLIENT_NAME,
			B.CREDENTIALS_TYPE,
			DECRYPT_DEC(B.CREDENTIALS_NO) CREDENTIALS_NO,
			C.USERNAME AS USER_SYS_NAME,
			B.QUERY_REASON,
			B.QUERY_VERSION,
			B.WARRANT_MATURITY_DATE,
			B.QUERY_TYPE
		FROM
			CIFM_FLOW_STATUS A,CIFM_PERSON_INFO B,SYS_USER C
		WHERE
			A.ID = B.ID AND A.ID= #{ID} AND A.USER_SYS_ID = C.USER_ID
	</select>
	<!-- 更新审核状态 -->
	<update id="UpdateCheck" parameterType="pd" >
		UPDATE
				CIFM_FLOW_STATUS
			set 
				CHECK_TIME 				= STR_TO_DATE(#{CHECK_TIME},'%Y-%m-%d %H:%i:%s'),
				QUERY_TIME 				= STR_TO_DATE(#{QUERY_TIME},'%Y-%m-%d %H:%i:%s'),
				STATUS 					= #{STATUS},
				CHECK_REJECT_RESON		= #{CHECK_REJECT_RESON},
				RESULTCODE		= #{RESULTCODE},
				REPORT_ID		= #{REPORT_ID}
			where 
				ID= #{ID}
	</update>
	<!-- 更新状态 -->
	<update id="updateStatus" parameterType="pd" >
		UPDATE
				CIFM_FLOW_STATUS
			set 
				STATUS 	= #{STATUS}
			where 
				ID= #{ID}
				and STATUS='02'
	</update>
	<!-- 记录查询次数-->
	<update id="updateRerunsTime" parameterType="pd" >
		UPDATE
				CIFM_FLOW_STATUS
			set 
				RERUNS_TIME		= #{RERUNS_TIME}
			where 
				ID= #{ID}
	</update>
	<!-- 如果密码错误，则将该用户的密码状态置为锁定-->
	<update id="updateCreditStatus" parameterType="pd" >
		UPDATE
				CIFM_CREDIT_ACCT_MANAGE
			set 
				PERBANK_STATUS		= #{PERBANK_STATUS}
			where 
				CREDIT_CODE= #{USERNAME}
	</update>
	 <!-- 查询明细表需要的信息 -->
	<select id="QueryDetail" parameterType="String" resultType="pd" >
		SELECT
			A.ID,
			B.IP,
			to_char(B.CHECK_TIME,'yyyy-mm-dd hh24:mi:ss') CHECK_TIME,
			'0' IS_GET,
			A.QUERY_VERSION,
			A.QUERY_REASON,
			DECRYPT_DEC(A.CREDENTIALS_NO) CREDENTIALS_NO,
			A.CREDENTIALS_TYPE,
			DECRYPT_DEC(A.CLIENT_NAME) CLIENT_NAME,
			to_char(B.QUERY_TIME,'yyyy-mm-dd hh24:mi:ss') QUERY_TIME,
			C.NAME USER_REAL_NAME,
			C.USERNAME USER_SYS_NAME,
			E.NAME BRANCH_NAME,
			E.BRANCH_CODE_PERBANK BRANCH_CODE,
			E.ORG_ID_PERBANK ORG_CODE
		FROM 
			CIFM_PERSON_INFO A,
			CIFM_FLOW_STATUS B,
			SYS_USER C,
			SYS_USER_ORG D,
			SYS_ORG E
		WHERE 
			A.ID = B.ID
			AND B.USER_SYS_ID = C.USER_ID
			AND C.USER_ID = D.USER_ID
			AND D.ORG_ID = E.ORG_ID
			AND A.ID = #{ID}
	</select>
	<!-- 向明细表中添加数据-->
	<insert id="saveDetail" parameterType="pd">
		INSERT INTO CIFM_PERSON_DETAIL
			(
				ID,
				IP,
				CHECK_TIME,
				IS_GET,
				QUERY_VERSION,
				QUERY_REASON,
				CREDENTIALS_NO,
				CREDENTIALS_TYPE,
				CLIENT_NAME,
				QUERY_TIME,
				USER_REAL_NAME,
				USER_SYS_NAME,
				BRANCH_NAME,
				BRANCH_CODE,
				ORG_CODE
			)
		VALUES
			(
				#{ID},
				#{IP},
				STR_TO_DATE(#{CHECK_TIME},'%Y-%m-%d %H:%i:%s'),
				#{IS_GET},
				#{QUERY_VERSION},
				#{QUERY_REASON},
				ENCRYPT_DEC(#{CREDENTIALS_NO}),
				#{CREDENTIALS_TYPE},
				ENCRYPT_DEC(#{CLIENT_NAME}),
				STR_TO_DATE(#{QUERY_TIME},'%Y-%m-%d %H:%i:%s'),
				#{USER_REAL_NAME},
				#{USER_SYS_NAME},
				#{BRANCH_NAME},
				#{BRANCH_CODE},
				#{ORG_CODE}
			)
	</insert>
	<!-- 更新明细表中查询结果状态 -->
	<update id="UpdateDetailCheck" parameterType="pd" >
		UPDATE
				cifm_person_detail
			set 
				CHECK_TIME 				= STR_TO_DATE(#{CHECK_TIME},'%Y-%m-%d %H:%i:%s'),
				QUERY_TIME 				= STR_TO_DATE(#{QUERY_TIME},'%Y-%m-%d %H:%i:%s'),
				IS_GET 	= #{IS_GET}
			where 
				ID= #{ID}
	</update>
	  <!-- 查询当前用户机构 -->
	<select id="getUserOrgID" parameterType="pd" resultType="String" >
		SELECT 
			ORG_ID 
		FROM 
			SYS_USER_ORG 
		WHERE 
			USER_ID = #{USER_ID}
	</select>
	
	 <!-- 查询人行登录信息 -->
	<select id="getLoginInfo" parameterType="pd" resultType="pd" >
		SELECT 
			CREDIT_CODE,CURRENT_PASSWORD,PERBANK_STATUS 
		FROM 
			CIFM_CREDIT_ACCT_MANAGE A,SYS_USER B 
		WHERE A.CREDIT_CODE = B.USERNAME_PERBANK AND B.USERNAME=#{USERNAME} AND A.CREDIT_ACCT_TYPE in ('1','3')
	</select>
	 <!-- 查询查询员信息 -->
	<select id="getQueryUserInfo" parameterType="pd" resultType="pd" >
		SELECT 
			B.USERNAME,
			B.USER_ID
		FROM 
			CIFM_FLOW_STATUS A,SYS_USER B 
		WHERE A.ID = #{ID} AND A.USER_SYS_ID=B.USER_ID
	</select>
	<select id="findTabColClawerByTag" parameterType="String" resultType="pd">
	   select 
	       TABLE_NAME,      
           TABLE_COMMENT,   
           COLUMN_NAME,     
           COLUMN_COMMENT
	   from 
	       TABCOL_COMMENT_CLAWER
       where 
           main_sub_tabtag=#{_parameter}
	</select>
	<select id="findTabColClawerByTableName" parameterType="String" resultType="pd">
	   select 
	       TABLE_NAME,      
           TABLE_COMMENT,   
           COLUMN_NAME,     
           COLUMN_COMMENT
	   from 
	       TABCOL_COMMENT_CLAWER
       where 
           TABLE_COMMENT like "%"#{_parameter}"%"
	</select>
	<!-- 根据传入的action名查找页面登录所需的参数 -->
	<select id="findWebCrawlerInfoByAction" parameterType="String" resultType="pd" >
		select 
		     code,
		     value 
	   from 
	          web_crawler_info 
	   where 
	          urlaction_name=#{_paramter}
	</select>
	<!-- 根据传入的字典名称和系统字典code查找人行字典code -->
	<select id="findWebCrawlerDictByCode" parameterType="pd" resultType="pd" >
		select 
		     C_CODE 
		from 
		     webCrawler_dict 
        where 
            dict_name = #{dict_name}
         and 
             o_code = #{o_code}
	</select>
	<!-- 查找出所有需要转数据字典列的表名 -->
	<select id="findTabNameByType" parameterType="pd" resultType="pd" >
		select   
		       TABLE_NAME 
		from 
		       dict_col_mapping 
		where 
		      table_name like  #{type}"%"
		group by 
		       table_name
	</select>
	<!-- 根据表名查找出所有需要转数据字典列的信息 -->
	<select id="findDictByTabName" parameterType="pd" resultType="pd" >
		select   
		        D_NUM,TABLE_NAME,COLUMN_NAME 
		from 
		       dict_col_mapping 
		where 
		       table_name =  #{TABLE_NAME}		
	</select>
	<!-- 根据字典编号和中文名称查找CODE -->
	<select id="findCodeByName" parameterType="pd" resultType="pd" >
		select 
		       D_NUM,CODE,NAME 
		from 
		       xml_dictionaries 
		where 
		       d_num= #{D_NUM} 
	    and 
	           name = #{NAME}
	</select>
	
	<!-- 查找出所有需要转数据字典列2的表名,列名和数据字典编号 -->
	<select id="findAllTabName2" parameterType="pd" resultType="pd" >
		select 
		      ID ,TABLE_NAME,COLUMN_NAME 
		from 
		      one_dict  
		where 
		      is_add_new_col='1'
		 and  
		      table_name like  #{type}"%"		      
	</select>
	<!-- 查找出所有需要转数据字典并且还加密的表名,列名和数据字典编号 -->
	<select id="findEncryptTabName" parameterType="pd" resultType="pd" >
		select 
		      a.D_NUM,a.TABLE_NAME,a.COLUMN_NAME 
		from 
		      dict_col_mapping a, 
		      table_col_encrypt b 
		where 
		      a.table_name = b.table_name 
		and 
		      a.column_name = b.col_name 
		and 
		      a.table_name like #{type}"%"	      
	</select>
	<!-- 查找出所有需要转数据字典 列2 并且还加密的表名,列名和数据字典编号 -->
	<select id="findEncryptTabName2" parameterType="pd" resultType="pd" >
		select 
		      one.ID,one.TABLE_NAME,one.COLUMN_NAME 
		from 
		      one_dict one ,
		      table_col_encrypt b 
		where 
		      one.table_name = b.table_name 
		and 
		      one.column_name=b.col_name 
		and 
		      one.is_add_new_col='1' 
		and 
		      one.table_name like #{type}"%"	      
	</select>
	
	<!-- 通过用户名查询爬虫网络所需参数 -->
	<select id="findWebCrawlerInfoByUser" parameterType="pd" resultType="pd">
		select 
		      a.USER_CODE,
		      a.USER_PWD,
		      a.LOCAL_CPU,
		      a.LOCAL_DISK,
		      a.LOCAL_NETWORK,
		      a.PER_STATEMENT,
		      a.PER_TOKEN,
		      a.COM_STATEMENT,
		      a.COM_TOKEN,
		      b.SUBJECT 
		from 
		      web_crawler_info2 a
		      left join  CIFM_CREDIT_ACCT_MANAGE b 
		      on a.user_code = b.CREDIT_CODE
		where 
	          a.user_code  = #{USERNAME}    
	</select>
   <!-- 通过人行账户名查询爬虫网络所需参数 -->
	<select id="findWebCrawlerInfoByCertName" parameterType="pd" resultType="pd">
		select 
		      a.USER_CODE,
		      a.USER_PWD,
		      a.LOCAL_CPU,
		      a.LOCAL_DISK,
		      a.LOCAL_NETWORK,
		      a.PER_STATEMENT,
		      a.PER_TOKEN,
		      a.COM_STATEMENT,
		      a.COM_TOKEN ,
		      b.SUBJECT as "subject"
		from 
		      web_crawler_info2 a,
		      CIFM_CREDIT_ACCT_MANAGE b
		where 
			 a.user_code = b.CREDIT_CODE and
	          a.user_code = #{USERNAME}	    
	</select>
	<select id="selectInfo" parameterType="pd" resultType="pd">
		${creatSql}
	</select>
	<!-- 更新信息-->
	<update id="updateInfo" parameterType="pd" useGeneratedKeys="false">
		${updateSql}
	</update>
	
	<!-- 根据id查询此次请求是否带有渠道号和渠道流水号，区分柜面发起和第三方发起，但最终是给第三方返回json存储使用 -->
	<select id="findChannelInfoById" parameterType="pd" resultType="pd">
		SELECT  A.CHANNEL_ID,A.CHANNEL_QUERY_NO  FROM  CIFM_FLOW_STATUS A WHERE  A.ID = #{ID}  
	</select>
	
	<!-- 爬虫页面用户第一次登录新增密码修改操作 -->
	<select id="findCreditAcctInfoByCode" parameterType="pd" resultType="pd">
		select CREDIT_CODE USERNAME,
		       CURRENT_PASSWORD,
		       b.USER_PWD PWD_ENCRYPT,
		       a.PWD_CODE,
		       (select ORG_ID_COMBANK
		          from sys_org
		         where org_id =
		               (select org_id
		                  from sys_user_org
		                 where user_id = (select user_id
		                                    from sys_user
		                                   where USERNAME_PERBANK_ORG = a.credit_code
		                                     and rownum = 1))
		           and rownum = 1) ORGCODE
		  from CIFM_CREDIT_ACCT_MANAGE a
		  left join web_crawler_info2 b
		    on a.CREDIT_CODE = b.user_code
		 where a.CREDIT_CODE = #{USER_CODE}
	</select >
	<!-- 根据密码编号查找预先设置好的密码 -->
	<select id="findPrePassByCode" parameterType="pd" resultType="pd">
		select PWD_CODE,PASSWORD,PWD_ENCRYPT from password_list  where pwd_code = #{pwd_code}
	</select>
	
	<!-- 将修改完的密码入库更新 -->
	<update id="updateCreditAcct" parameterType="pd">
		update CIFM_CREDIT_ACCT_MANAGE set PREVIOUS_PASSWORD = #{PREVIOUS_PASSWORD}
								  ,CURRENT_PASSWORD = #{CURRENT_PASSWORD}
								  ,CURRENT_TIME = to_char(sysdate,'yyyymmdd')
								  ,PWD_CODE = #{PWD_CODE}
								  ,PWD_EXPIRES_DATE = to_char(sysdate + ${EXPIRES_DATE},'yyyymmdd')
								   where CREDIT_CODE = #{USER_CODE}
	</update>
	
	<update id="updateWebCrawler2" parameterType="pd">
		update WEB_CRAWLER_INFO2 set USER_PWD = #{PWD_ENCRYPT}								  
								 where USER_CODE = #{USER_CODE}
	</update>
	
	
	
	
	<!-- 向明细表中添加数据-->
	<insert id="insertCompanySelectQueue" parameterType="pd">
		INSERT INTO CIFM_COMPANY_QUEUE
			(
				INCREMENT_ID,
				ID,
				USERNAME,
				QUEUE_TIME,
				QUERY_STATUS,
				LEVEL
			)
		VALUES
			(
				#{INCREMENT_ID},
				#{ID},
				#{USERNAME},
				DATE_FORMAT(NOW(),'%Y-%m-%d %H:%i:%s'),
				'1'	,
				#{LEVEL}
				
			)
	</insert>
	
	
	<!-- 根据传入的征信账号查询该征信账号下所有的未完成任务列表的第一个 -->
	<select id="findQueueStatus" parameterType="pd" resultType="pd">
		SELECT INCREMENT_ID,
				ID,
				USERNAME,
				QUERY_STATUS 
			FROM CIFM_COMPANY_QUEUE  
		WHERE USERNAME = #{USERNAME} 
			AND QUERY_STATUS != '3' 
		ORDER BY LEVEL DESC,QUEUE_TIME 
		LIMIT 1
	</select>
	
	<!-- 获取锁 -->
	<update id="updateQueueGetLock" parameterType="pd">
		UPDATE CIFM_COMPANY_QUEUE
			SET QUERY_START_TIME = DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
			 QUERY_STATUS = '2'
			WHERE
				ID = #{ID} AND INCREMENT_ID = #{INCREMENT_ID}
	</update>
	
	
	<!-- 释放锁 -->
	<update id="updateQueueReleaseLock" parameterType="pd">
		UPDATE CIFM_COMPANY_QUEUE
			SET QUERY_END_TIME = DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
			 QUERY_STATUS = '3',
			 RELEASE_LOCK_STSTUS = #{RELEASE_LOCK_STSTUS} 
			 WHERE
				ID = #{ID} AND INCREMENT_ID = #{INCREMENT_ID} 
	</update>
	
	<!-- 查到正在运行线程的情况,如果运行超过半分钟,那么直接释放掉该锁 只查询正在运行中的
	<select id="findQueueUpperStatus" parameterType="pd" resultType="pd">
		SELECT
			INCREMENT_ID,
			ID,
			USERNAME,
			QUERY_STATUS,
			TIMESTAMPDIFF(
				SECOND,
				QUERY_START_TIME,
				DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s')
			) AS RUN_TIME_SECOND		
			FROM CIFM_COMPANY_QUEUE  
		WHERE USERNAME = #{USERNAME} 
			AND QUERY_STATUS = '2' 
		and QUEUE_TIME <![CDATA[<]]> (Select QUEUE_TIME from CIFM_COMPANY_QUEUE where id=#{ID} order by QUEUE_TIME DESC limit 1)
	</select> -->
	<!-- 查到正在运行线程的情况,如果运行超过一分钟,那么直接释放掉该锁 -->
	<select id="findQueueUpperStatus" parameterType="pd" resultType="pd">
		SELECT
			INCREMENT_ID,
			ID,
			USERNAME,
			QUERY_STATUS,
			TIMESTAMPDIFF(
				SECOND,
				QUERY_START_TIME,
				DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s')
			) AS RUN_TIME_SECOND		
			FROM CIFM_COMPANY_QUEUE  
		WHERE USERNAME = #{USERNAME} 
			AND QUERY_STATUS = '2' 
			and QUEUE_TIME <![CDATA[<]]> (Select QUEUE_TIME from CIFM_COMPANY_QUEUE where INCREMENT_ID=#{INCREMENT_ID} order by QUEUE_TIME DESC limit 1)
		union all(
		       SELECT
			INCREMENT_ID,
			ID,
			USERNAME,
			QUERY_STATUS,
			'' AS RUN_TIME_SECOND		
			FROM CIFM_COMPANY_QUEUE  
		WHERE USERNAME =#{USERNAME}
			AND QUERY_STATUS = '1' and QUEUE_TIME <![CDATA[<]]> (Select QUEUE_TIME from CIFM_COMPANY_QUEUE where INCREMENT_ID=#{INCREMENT_ID} order by QUEUE_TIME DESC limit 1))
		
		
	</select> 
	
	<!-- 释放锁 -->
	<update id="updateQueueUpperStatus" parameterType="pd">
		UPDATE CIFM_COMPANY_QUEUE
			SET QUERY_END_TIME = DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s'),
			 QUERY_STATUS = '3',
			 RELEASE_LOCK_STSTUS = '3'
			WHERE
				ID = #{ID} AND INCREMENT_ID = #{INCREMENT_ID} 
	</update>
	
	
	<insert id="saveBody" parameterType="pd">
		INSERT INTO BODY_DATA
			(
				QUERY_NO,
				ID,
				BODY,
				DATE
			)
		VALUES
			(
				#{QUERY_NO},
				#{ID},
				#{BODY},
				DATE_FORMAT(NOW(),'%Y-%m-%d %H:%i:%s')			
			)
	</insert>
	
	<select id="getBody" parameterType="String" resultType="pd">
		select 
			QUERY_NO,
				ID,
				BODY,
				DATE
			from 
			BODY_DATA
			where ID = #{ID} 
			order by DATE desc
			limit 1
	</select>
	<select id="getBodyNoCommand" parameterType="String" resultType="pd">
		select 
			QUERY_NO,
				ID,
				BODY,
				DATE
			from 
			BODY_DATA
			where ID = #{ID} 
			limit 1
	</select>
	
</mapper>