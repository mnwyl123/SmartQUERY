<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="IndAppReMapper">
    
   <!-- 个人查询申请审核列表 -->
<select id="IndAppRelistPage" parameterType="page" resultType="pd" >
		SELECT
            A.ID,
            DATE_FORMAT(A.APPLICATION_TIME,'%Y-%m-%d %H:%i:%s') APPLICATION_TIME,
            A.USER_SYS_ID,
            A.INTERNAL,
            A.CLIENT_TYPE,
            B.CLIENT_NAME,
            B.CREDENTIALS_TYPE,
            B.CREDENTIALS_NO,
            B.QUERY_REASON,
            B.QUERY_VERSION,
            C.NAME AS ORG_NAME,
           	A.WARRANT,
        	A.LOAN_APPLICATION,
        	A.IDENTITY_DOCUMENT,
        	A.PRO_ID,
		  	p.PRODUCT_NAME
        FROM
            CIFM_FLOW_STATUS A
            inner join CIFM_PERSON_INFO B on  A.ID = B.ID AND A.STATUS='01' AND A.CLIENT_TYPE = '1' 
            inner join SYS_USER_ORG D on  D.USER_ID = A.USER_SYS_ID
            inner join SYS_ORG C on C.ORG_ID=D.ORG_ID
            left join cifm_product p on  A.PRO_ID = p.product_id
        WHERE
            1=1 AND A.CHECK_SYS_ID = #{pd.USER_ID}  AND #{pd.ORG_ID} in (SELECT ORG_ID FROM SYS_USER_ORG WHERE USER_ID =A.USER_SYS_ID) 
			<if test="pd.CLIENT_NAME!=null and pd.CLIENT_NAME!=''">
			    AND 
			    	B.CLIENT_NAME = #{pd.CLIENT_NAME}
			</if>
			<if test="pd.CREDENTIALS_TYPE!=null and pd.CREDENTIALS_TYPE!=''">
			    AND 
			    	B.CREDENTIALS_TYPE = #{pd.CREDENTIALS_TYPE}
			</if>
			<if test="pd.CREDENTIALS_NO!=null and pd.CREDENTIALS_NO!=''">
			    AND 
			    	B.CREDENTIALS_NO = #{pd.CREDENTIALS_NO}
			</if>
	</select>
	  <!-- 查询系统用户部门 -->
	<select id="getUserDepart" parameterType="pd" resultType="String" >
		SELECT
			DEPT_CODE
		FROM
			SYS_USER
		WHERE
			USER_ID = #{USER_SYS_ID}
	</select>
	  <!-- 查询系统用户机构 -->
	<select id="getUserOrg" parameterType="pd" resultType="String" >
		SELECT 
			A.NAME 
		FROM 
			SYS_ORG A,SYS_USER_ORG B 
		WHERE 
			A.ORG_ID = B.ORG_ID AND B.USER_ID = #{USER_SYS_ID}
	</select>
	   <!-- 查询个人申请信息 -->
	<select id="getAppCheck" parameterType="pd" resultType="pd" >
		SELECT
			A.APPLICATION_TIME,
			A.INTERNAL,
			B.CLIENT_NAME,
			B.CLIENT_NAME ENCRY_CLIENT_NAME,
			B.CREDENTIALS_TYPE,
			B.CREDENTIALS_NO,
			A.USER_SYS_ID,
			C.USERNAME AS USER_SYS_NAME,
			B.QUERY_REASON,
			B.QUERY_VERSION,
			B.WARRANT_MATURITY_DATE,
			B.QUERY_TYPE,
			A.ORG_ID,
			ifnull(A.WARRANT,d.APPLICATION_URL) WARRANT,
			ifnull(A.LOAN_APPLICATION,e.APPLICATION_URL) LOAN_APPLICATION,
			ifnull(A.IDENTITY_DOCUMENT,f.APPLICATION_URL) IDENTITY_DOCUMENT,
			A.CHANNEL_ID ,	
			A.PRO_ID,
			right(A.WARRANT,3) as WARRANTTYPE,
			right(A.LOAN_APPLICATION,3) as LOAN_APPLICATIONTYPE,
			right(A.IDENTITY_DOCUMENT,3) as IDENTITY_DOCUMENTTYPE
		FROM
			CIFM_FLOW_STATUS A 
		left join CIFM_PERSON_INFO B on A.ID = B.ID
		left join SYS_USER C on A.USER_SYS_ID = C.USER_ID
		left join id_url d on a.id = d.id and d.APPLICATION_TYPE = '01'
		left join id_url e on a.id = e.id and e.APPLICATION_TYPE = '02'
		left join id_url f on a.id = f.id and f.APPLICATION_TYPE = '03'
		where 
			A.ID= #{ID} 
	</select>
	<!-- 更新审核状态 -->
	<update id="UpdateCheck" parameterType="pd" >
		UPDATE
				CIFM_FLOW_STATUS
			set 
				CHECK_TIME 				= STR_TO_DATE(#{CHECK_TIME},'%Y-%m-%d %H:%i:%s'),
				QUERY_TIME 				= STR_TO_DATE(#{QUERY_TIME},'%Y-%m-%d %H:%i:%s'),
				STATUS 					= #{STATUS},
				CHECK_REJECT_RESON		= #{CHECK_REJECT_RESON},
				REPORT_ID				= #{REPORT_ID}
			where 
				ID= #{ID}
	</update>
	<!-- 更新状态 -->
	<update id="updateStatus" parameterType="pd" >
		UPDATE
				CIFM_FLOW_STATUS
			set 
				STATUS 					= #{STATUS}
			where 
				ID= #{ID}
				and STATUS='02'
	</update>
	 <!-- 查询明细表需要的信息 -->
	<select id="QueryDetail" parameterType="String" resultType="pd" >
		SELECT
			A.ID,
			B.IP,
			date_format(B.CHECK_TIME,'%Y-%m-%d %H:%i:%s') CHECK_TIME,
			'0' IS_GET,
			A.QUERY_VERSION,
			A.QUERY_REASON,
			A.QUERY_TYPE,
			A.CREDENTIALS_NO,
			A.CREDENTIALS_TYPE,
			A.CLIENT_NAME,
			date_format(B.QUERY_TIME,'%Y-%m-%d %H:%i:%s') QUERY_TIME,
			C.NAME USER_REAL_NAME,
			C.USERNAME USER_SYS_NAME,
			E.NAME BRANCH_NAME,
			E.BRANCH_CODE_PERBANK BRANCH_CODE,
			E.ORG_ID_PERBANK ORG_CODE,
			E.ORG_ID
		FROM 
			CIFM_PERSON_INFO A,
			CIFM_FLOW_STATUS B,
			SYS_USER C,
			SYS_USER_ORG D,
			SYS_ORG E
		WHERE 
			A.ID = B.ID
			AND B.USER_SYS_ID = C.USER_ID
			AND C.USER_ID = D.USER_ID
			AND D.ORG_ID = E.ORG_ID
			AND A.ID = #{ID}
	</select>
	<!-- 查询状态表的信息 -->
	<select id="QueryFlowStatus" parameterType="String" resultType="pd" >
		SELECT
			*
		FROM CIFM_FLOW_STATUS	
		WHERE ID = #{ID}
	</select>
	<!-- 向明细表中添加数据-->
	<insert id="saveDetail" parameterType="pd">
		INSERT INTO CIFM_PERSON_DETAIL
			(
				ID,
				IP,
				CHECK_TIME,
				IS_GET,
				QUERY_VERSION,
				QUERY_REASON,
				CREDENTIALS_NO,
				CREDENTIALS_TYPE,
				CLIENT_NAME,
				QUERY_TIME,
				USER_REAL_NAME,
				USER_SYS_NAME,
				BRANCH_NAME,
				BRANCH_CODE,
				ORG_CODE
			)
		VALUES
			(
				#{ID},
				#{IP},
				STR_TO_DATE(#{CHECK_TIME},'%Y-%m-%d %H:%i:%s'),
				#{IS_GET},
				#{QUERY_VERSION},
				#{QUERY_REASON},
				#{CREDENTIALS_NO},
				#{CREDENTIALS_TYPE},
				#{CLIENT_NAME},
				STR_TO_DATE(#{QUERY_TIME},'%Y-%m-%d %H:%i:%s'),
				#{USER_REAL_NAME},
				#{USER_SYS_NAME},
				#{BRANCH_NAME},
				#{BRANCH_CODE},
				#{ORG_CODE}
			)
	</insert>
	<!-- 更新明细表中查询结果状态 -->
	<update id="UpdateDetailCheck" parameterType="pd" >
		UPDATE
				cifm_person_detail
			set 
				CHECK_TIME 				= STR_TO_DATE(#{CHECK_TIME},'%Y-%m-%d %H:%i:%s'),
				QUERY_TIME 				= STR_TO_DATE(#{QUERY_TIME},'%Y-%m-%d %H:%i:%s'),
				IS_GET 	= #{IS_GET}
			where 
				ID= #{ID}
	</update>
	  <!-- 查询当前用户机构 -->
	<select id="getUserOrgID" parameterType="pd" resultType="String" >
		SELECT 
			ORG_ID 
		FROM 
			SYS_USER_ORG 
		WHERE 
			USER_ID = #{USER_ID}
	</select>
	
	 <!-- 查询人行登录信息 -->
	<select id="getLoginInfo" parameterType="pd" resultType="pd" >
		SELECT 
			CREDIT_CODE,CURRENT_PASSWORD 
		FROM 
			CIFM_CREDIT_ACCT_MANAGE A,SYS_USER B 
		WHERE A.CREDIT_CODE = B.USERNAME_PERBANK AND B.USERNAME=#{USERNAME}
	</select>
	<!-- 查询查询员信息 -->
	<select id="getQueryUserInfo" parameterType="pd" resultType="pd" >
		SELECT 
			B.USERNAME,
			B.USER_ID
		FROM 
			CIFM_FLOW_STATUS A,SYS_USER B 
		WHERE A.ID = #{ID} AND A.USER_SYS_ID=B.USER_ID
	</select>
	<!-- 查询请求信息-->
	<select id="getQueryInfo" parameterType="pd" resultType="pd" >
		    SELECT 
			      T.ID,
			      (SELECT VALUE from SERVER_MESSAGE_INFO  WHERE CODE = 'PER_QueryOrgCode') QUERY_ORG_CODE,
			      (SELECT VALUE from SERVER_MESSAGE_INFO  WHERE CODE = 'RECE_ORG_CODE') RECE_ORG_CODE,
			      C.USERNAME_PERBANK USERNAME_PERBANK,
			      (SELECT A.CURRENT_PASSWORD FROM  CIFM_CREDIT_ACCT_MANAGE A WHERE A.CREDIT_CODE =  C.USERNAME_PERBANK AND CREDIT_ACCT_TYPE in ('1','3')) PASSWORD,
			      E.BRANCH_CODE_PERBANK ORIGINATE_ORG_CODE,
			      C.USERNAME ORIGINATE_USER_CODE,
			      (SELECT VALUE from SERVER_MESSAGE_INFO  WHERE CODE = 'PER_ServiceCode_NumRead') SERVICE_CODE,
			      T.CLIENT_NAME CLIENT_NAME,
			      T.CREDENTIALS_TYPE ID_TYPE,
			      T.CREDENTIALS_NO ID_NUM,
			      T.QUERY_REASON QUERY_REASON,
			      C.NAME
		    FROM  
		    	  CIFM_PERSON_INFO T,
			      CIFM_FLOW_STATUS M,
			      SYS_USER C,
			      SYS_USER_ORG D,
			      SYS_ORG E
		    WHERE  M.ID = T.ID AND M.USER_SYS_ID = C.USER_ID AND C.USER_ID = D.USER_ID AND D.ORG_ID = E.ORG_ID
			   AND T.ID = #{ID}
	</select>
	<!-- 获取数据 and        findByInfoOnFindingA.INTERNAL = '2' -->
	<select id="findByInfo" parameterType="pd" resultType="pd">
      select 
          A.ID,
          A.REPORT_ID,
          A.CHANNEL_QUERY_NO,
          A.STATUS,
          A.query_time
      from 
        CIFM_FLOW_STATUS A
      left join
        CIFM_PERSON_INFO B
      on
        A.ID = B.ID
      where
        A.STATUS IN ('06')
      
      and
        A.CLIENT_TYPE = '1'
      and
        B.CLIENT_NAME = #{CLIENT_NAME}
      and
        B.CREDENTIALS_TYPE = #{CREDENTIALS_TYPE}
      and
        B.CREDENTIALS_NO = #{CREDENTIALS_NO}
      and
        #{LIMT_DATE}  &gt; DATEDIFF(SYSDATE(),QUERY_TIME)
      and 
      	A.RESULTCODE = 'AAA000'
      limit 1
	</select>
	
	<!-- 获取数据 and        A.INTERNAL = '2' -->
	<select id="findByInfoOnFinding" parameterType="pd" resultType="pd">
      select 
          A.ID,
          A.REPORT_ID,
          A.CHANNEL_QUERY_NO,
          A.STATUS,
          A.query_time
      from 
        CIFM_FLOW_STATUS A
      left join
        CIFM_PERSON_INFO B
      on
        A.ID = B.ID
      where
        A.STATUS IN ('02','20')
      
      and
        A.CLIENT_TYPE = '1'
      and
        B.CLIENT_NAME = #{CLIENT_NAME}
      and
        B.CREDENTIALS_TYPE = #{CREDENTIALS_TYPE}
      and
        B.CREDENTIALS_NO = #{CREDENTIALS_NO}
      and
        #{LIMT_DATE}  &gt; DATEDIFF(SYSDATE(),QUERY_TIME)
      limit 1
	</select>
	
	<!-- 更新审核状态 -->
	<update id="updateInner" parameterType="pd" >
		UPDATE
				CIFM_FLOW_STATUS
			set 
				INTERNAL		= #{INTERNAL}
			where 
				ID= #{ID}
	</update>
	<!-- 公共保存方法 -->
	<insert id="publicSave" parameterType="String" useGeneratedKeys="false">
		${_parameter}
	</insert>
	<!-- 存放报文数据需要的表及表的列 -->
	<select id="reportTabAndCol" resultType="pd">
		SELECT XML_TAG,TABLE_NAME,COLUMN_NAME FROM XML_COL_MAPPING WHERE XML_TAG IS NOT NULL
	</select>
	
	<!-- 存放重要信息提示数据需要的表及表的列 -->
	<select id="reportTabAndCol_Impo" resultType="pd">
		SELECT XML_TAG,table_name , column_name ,comment_name FROM IMPORTINFO_COL_MAPPING
	</select>
	
	
	<!-- 查询表名对应的列名 -->
	<select id="queryColOfTab" parameterType="List" resultType="pd">
		SELECT TABLE_NAME TAB,COLUMN_NAME COL FROM USER_TAB_COLS WHERE 
		TABLE_NAME IN
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</select>
	<!-- 查询xml报告对应的数据字典 -->
	<select id="queryXmlDic" resultType="String">
		SELECT CONCAT(D_NUM,'@',CODE,'@',NAME) DIC FROM XML_DICTIONARIES
	</select>
	<!-- 查询标签对应字段为SERIAL -->
	<select id="querySerial" resultType="String">
		SELECT XML_TAG FROM XML_COL_MAPPING 
		WHERE 
			COLUMN_NAME='SERIAL' AND LENGTH(TRIM(XML_TAG))=8
	</select>
	
	
	<!-- 查询需要加密的表名和字段名 -->
	<select id="queryTableColData" resultType="pd">
	     select 
			TABLE_NAME,
			GROUP_CONCAT(DISTINCT COL_NAME SEPARATOR ',') COL_NAME
			  from TABLE_COL_ENCRYPT
			group by TABLE_NAME
	</select>
	<!-- 根据流程id获取查询征信报告的系统用户的真实名称 -->
	<select id="findNameByFlowId" parameterType="String" resultType="String">
		SELECT 
			B.NAME 
		FROM 
			CIFM_FLOW_STATUS A,
			SYS_USER B 
		WHERE A.USER_SYS_ID = B.USER_ID 
		AND A.ID=#{_parameter}
	</select>
	<!-- 查询法人代码根据用户名 -->
	<select id="getCompanyByUsername"  parameterType="String" resultType="pd">
		SELECT 
			COMPANY,
			(SELECT ORG_ID FROM SYS_USER_ORG WHERE USER_ID = A.USER_ID) ORG_ID
		FROM 
			SYS_USER A
		WHERE USERNAME = #{_parameter}
		limit 1
	</select>
	<!-- 查询村镇银行法人代码 -->
	<select id="townCompany"  parameterType="String" resultType="pd">
		SELECT 
			VALUE
		FROM 
			SERVER_MESSAGE_INFO 
		WHERE CODE=#{_parameter}
	</select>
		<!-- 查询村镇银行法人代码 -->
	<select id="findQueryType"  parameterType="String" resultType="pd">
		SELECT 
			VALUE
		FROM 
			SERVER_MESSAGE_INFO 
		WHERE CODE=#{_parameter}
	</select>
	<!-- 更新接口查询结果代码，结果描述，文件名 -->
	<update id="updateResult" parameterType="pd" >
		UPDATE
				CIFM_FLOW_STATUS
			set 
				RESULTCODE = #{ResultCode},
				RESULTDESC = #{ResultDesc},
				REPORTNAME = #{ReportName}
			where 
				ID= #{ID}
	</update>
	<!-- 查找出所有需要转数据字典列的表名 -->
	<select id="findTabNameByType" parameterType="pd" resultType="pd" >
		select   
		       TABLE_NAME 
		from 
		       dict_col_mapping 
		where 
		      table_name like  CONCAT(#{type},'%')
		group by 
		       table_name
	</select>
	<!-- 根据表名查找出所有需要转数据字典列的信息 -->
	<select id="findDictByTabName" parameterType="pd" resultType="pd" >
		select   
		        D_NUM,TABLE_NAME,COLUMN_NAME 
		from 
		       dict_col_mapping 
		where 
		       table_name =  #{TABLE_NAME}		
	</select>
	<!-- 根据字典编号和中文名称查找CODE -->
	<select id="findCodeByName" parameterType="pd" resultType="pd" >
		select 
		       d_num,code,name 
		from 
		       xml_dictionaries 
		where 
		       d_num= #{D_NUM} 
	    and 
	           name = #{NAME}
	</select>
	
	<!-- 查找出所有需要转数据字典列2的表名,列名和数据字典编号 -->
	<select id="findAllTabName2"  parameterType="pd"  resultType="pd" >
		select 
		      ID ,TABLE_NAME,COLUMN_NAME 
		from 
		      one_dict  
		where 
		      is_add_new_col='1'
		 and  
		      table_name like  CONCAT(#{type},'%')
	</select>
	<!-- 查找出所有需要转数据字典并且还加密的表名,列名和数据字典编号 -->
	<select id="findEncryptTabName" parameterType="pd" resultType="pd" >
		select 
		      a.D_NUM,a.TABLE_NAME,a.COLUMN_NAME 
		from 
		      dict_col_mapping a, 
		      table_col_encrypt b 
		where 
		      a.table_name = b.table_name 
		and 
		      a.column_name = b.col_name 
		and 
		      a.table_name like CONCAT(#{type},'%')	      
	</select>
	<!-- 查找出所有需要转数据字典 列2 并且还加密的表名,列名和数据字典编号 -->
	<select id="findEncryptTabName2" parameterType="pd" resultType="pd" >
		select 
		      one.ID,one.TABLE_NAME,one.COLUMN_NAME 
		from 
		      one_dict one ,
		      table_col_encrypt b 
		where 
		      one.table_name = b.table_name 
		and 
		      one.column_name=b.col_name 
		and 
		      one.is_add_new_col='1' 
		and 
		      one.table_name like CONCAT(#{type},'%')	      
	</select>
	
	<select id="selectInfo" parameterType="pd" resultType="pd">
		${creatSql}
	</select>
	<select id="selectPdInfo" parameterType="pd" resultType="pd">
		${selectSql}
	</select>
	<!-- 更新信息-->
	<update id="updateInfo" parameterType="pd" useGeneratedKeys="false">
		${updateSql}
	</update>
	<!-- 删除信息-->
	<update id="deleteInfo" parameterType="pd" useGeneratedKeys="false">
		${deleteSql}
	</update>
	<!-- 将相关信息插入到XmlToHtml表中-->
	<insert id="XmlToHtmlSave" parameterType="pd">
		INSERT INTO xml_to_html_table
			(
				ID,
				QUERY_NAME,
				TYPE,
				QUERY_TIME
			)
		VALUES
			(
				#{ID},
				#{QUERY_NAME},
				#{TYPE},
				#{QUERY_TIME}
			)
	</insert>
	<!-- 将相关信息插入到XmlToHtml历史表中-->
	<insert id="XmlToHtmlSave_His" parameterType="pd">
		INSERT INTO XML_TO_HTML_TABLE_HIS
			(
				ID,
				QUERY_NAME,
				TYPE,
				QUERY_TIME
			)
		VALUES
			(
				#{ID},
				#{QUERY_NAME},
				#{TYPE},
				#{QUERY_TIME}
			)
	</insert>
	<!-- 查找接口用户人行账户密码信息 -->
	<select id="findPerbankInfo" parameterType="pd" resultType="pd" >
		select 
		      USERNAME,
		      PREVIOUS_PASSWORD,
		      CURRENT_PASSWORD	       
		from 		     
		      PERBANK_USERNAME_INTERFACE
		where 
		      USERNAME = #{USERNAME}	      
	</select>
	<insert id="savePerbankInfo" parameterType="pd">
		INSERT INTO PERBANK_USERNAME_INTERFACE
			(
			  USERNAME,
		      PREVIOUS_PASSWORD,
		      CURRENT_PASSWORD,
		      UPDATE_TIME, 
			  RESULTCODE,
			  RESULTDESC, 
			  MODIFRESULTCODE,
			  ERRDESC
			)
		VALUES
			(
			  #{USERNAME},
		      #{PREVIOUS_PASSWORD},
		      #{CURRENT_PASSWORD},
		      #{UPDATE_TIME}, 
			  #{RESULTCODE},
			  #{RESULTDESC}, 
			  #{MODIFRESULTCODE},
			  #{ERRDESC}
			)
	</insert>
	<update id="updatePerbankInfo" parameterType="pd">
		update 
		      PERBANK_USERNAME_INTERFACE
		set
		      PREVIOUS_PASSWORD = #{PREVIOUS_PASSWORD},
		      CURRENT_PASSWORD = #{CURRENT_PASSWORD},
		      UPDATE_TIME = #{UPDATE_TIME}, 
			  RESULTCODE = #{RESULTCODE},
			  RESULTDESC = #{RESULTDESC}, 
			  MODIFRESULTCODE = #{MODIFRESULTCODE}, 
			  ERRDESC = #{ERRDESC}
	    where 
			  USERNAME = #{USERNAME}
	</update>
	<update id="updatePerbankPwd" parameterType="pd">
		update 
		      PERBANK_USERNAME_INTERFACE
		set
		      PREVIOUS_PASSWORD = #{PREVIOUS_PASSWORD},
		      CURRENT_PASSWORD = #{CURRENT_PASSWORD},
		      UPDATE_TIME = #{CURRENT_TIME} 
	    where 
			  USERNAME = #{CREDIT_CODE}
	</update>
	<select id="getCREDITNUM" parameterType="pd" resultType="pd" >
		SELECT
			CREDIT_CODE,
		    PREVIOUS_PASSWORD,
		    CURRENT_PASSWORD
			from cifm_credit_acct_manage where PERBANK_STATUS = '1'
			<if test="ISWHITE!=null and ISWHITE!=''">
			    AND 
			    	ISWHITE = #{ISWHITE}
			</if>
			ORDER BY CREDIT_CODE
	</select>
	<update id="updateCREDITSTATUS" parameterType="pd">
		update  cifm_credit_acct_manage 
		set PERBANK_STATUS = #{PERBANK_STATUS} 
		where  CREDIT_CODE = #{CREDIT_CODE}
	</update>
	<update id="updateISWHITE" parameterType="pd">
		update  cifm_credit_acct_manage 
		set ISWHITE = #{ISWHITE} 
		where CREDIT_CODE = #{CREDIT_CODE}
	</update>
</mapper>